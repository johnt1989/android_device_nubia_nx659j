#!/sbin/sh

DEBUG=true

ZIPFILE=$3
OUTFD=$2

scr_wdth=50

# Detect real $OUTFD
if readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null; then
  OUTFD=0
  for FD in $( ls /proc/$$/fd ); do
    if readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null; then
      if ps | grep " 3 $FD " | grep -v grep >/dev/null; then
	OUTFD=$FD
	break
      fi
    fi
  done
fi

ui_print() {
  echo -ne "ui_print $1\n" >> /proc/self/fd/$OUTFD
  echo -ne "ui_print\n" >> /proc/self/fd/$OUTFD
}

debug_print() {
  [ "$DEBUG" = true ] && ui_print "$*"
}

print_full_bar() {
  ui_print "$(printf '%*s\n' $scr_wdth | tr ' ' '=')"
}

print_justified() {
  local str="$1"
  local str_len=${#str}
  local padding_len=$(( ($scr_wdth - $str_len - 2) / 2))
  local ljust="$(printf '%*s' $padding_len)"
  local rjust="$(printf '%*s' $(($padding_len + $str_len % 2)))"

  ui_print "=$ljust$str$rjust="
}

md5() {
  md5sum -b "$1"
}

file_changed() {
  local file="$1"
  local old_md5="$2"
  local new_md5=$( md5 "$file" )

  if [ $new_md5 != $old_md5 ]; then
    debug_print " -     ...modified."
  else
    debug_print " -     ...unchanged."
  fi
}

resize_vendor() {
  local dm_block_ext4=$(df -t ext4 | grep "/vendor" | cut -DF1)
  local dm_block_f2fs=$(df -t f2fs | grep "/vendor" | cut -DF1)

  if [ "$dm_block_ext4" ]; then
    ui_print " - Unmounting /vendor..."
    umount /vendor
    ui_print " - Checking vendor block partition before resizing..."
    e2fsck -f $dm_block_ext4
    ui_print " - Resizing the filesystem on $dm_block_ext4..."
    resize2fs $dm_block_ext4
    ui_print " - Make the partition R/W by unsharing its blocks..."
    e2fsck -E unshare_blocks $dm_block_ext4
  elif [ "$dm_block_f2fs" ]; then
    vendor_size_mb=$(du -sm /vendor | cut -f1)
    new_vendor_size_mb=`echo $vendor_size_mb \* 1.53 |bc`
    new_vendor_size_mb=${new_vendor_size_mb%.*}
    uuid=$(toybox blkid $dm_block_f2fs | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}' -o)
    ui_print " - Create R/W vendor image..."
    truncate -s ${new_vendor_size_mb}M /tmp/vendor-rw.img
    make_f2fs -g android -O project_quota,extra_attr,inode_checksum,sb_checksum,compression,flexible_inline_xattr,verity,inode_crtime -U $uuid -f -l vendor /tmp/vendor-rw.img
    mkdir -p /tmp/vendor-rw
    mount /tmp/vendor-rw.img /tmp/vendor-rw
    ui_print " - Copy old R/O vendor file to our new created..."
    cp -a --preserve=all /vendor/* /tmp/vendor-rw
    umount /vendor
    umount /tmp/vendor-rw
    ui_print " - Checking vendor image before flashing..."
    fsck.f2fs -f /tmp/vendor-rw.img
    ui_print " - Dynamic partition resizing using lptools"
    lptools resize vendor $(wc -c < /tmp/vendor-rw.img)
    lptools unmap vendor
    lptools map vendor
    ui_print " - Write our new R/W vendor image, Please wait..."
    dd if=/tmp/vendor-rw.img of=/dev/block/bootdevice/by-name/vendor
    rm -rf /tmp/vendor-rw*
  fi
  ui_print " - Remounting /vendor..."
  mount /vendor
  mount -o remount,rw /vendor
}

vendor_free_size_check() {
  if dd if=/dev/zero of=/vendor/test bs=1 count=1 2>/dev/null; then
    # ui_print " -     ...succeeded."
    rm -f /vendor/test
  else
    ui_print " - Checking vendor free size..."
    ui_print " -     ...No free space left on vendor, attempting to resize vendor..."
    ui_print " "
    rm -f /vendor/test
    resize_vendor
  fi
}

disable_fbe() {
  local md5
  local i
  fstab_files=`grep -lr 'fileencryption' vendor/etc`

  for i in $fstab_files; do
    if [ -f $i ]; then
      ui_print " - Disabling file-based encryption (FBE) for /data..."
      ui_print " -   Found $i."
      md5=$( md5 $i )
      sed -i -e 's/\,fileencryption\=aes\-256\-xts\:aes\-256\-cts\:v2\+inlinecrypt\_optimized\,wrappedkey\,//g' -e 's/\,keydirectory\=\/metadata\/vold\/metadata\_encryption//g' \
             -e 's/\,inlinecrypt//g' -e 's/\,wrappedkey//g' $i      # This comments out the offending line and adds an edited one.
      sed -i -e 's/^\([^#].*\)fileencryption=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
      #file_changed $i $md5
    fi
  done
}

disable_fde() {
  local md5
  local i
  fstab_files=`grep -lr 'forceencrypt' vendor/etc`

  for i in $fstab_files; do
    if [ -f $i ]; then
      ui_print " - Disabling full-disk encryption (FDE) for /data..."
      ui_print " -   Found $i."
      md5=$( md5 $i )
      sed -i -e 's/^\([^#].*\)forceencrypt=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
      #file_changed $i $md5
    fi
  done
}

disable_avb() {
  ui_print " - Disabling Android Verified Boot (AVB)..."
  sed -i -e 's/\,avb\_keys\=\/avb\/q\-gsi\.avbpubkey\:\/avb\/r\-gsi\.avbpubkey\:\/avb\/s\-gsi\.avbpubkey//g' -e 's/\,avb\=vbmeta//g' \
         -e 's/\,avb//g' /vendor/etc/fstab.default
}

disable_recovery_restoration() {
  local r=recovery-from-boot.p
  local found
  local i

  ui_print " - Disabling restoration of stock recovery..."

  for i in $ANDROID_ROOT $ANDROID_ROOT/system /vendor; do
    if [ -f $i/$r~ ]; then
	ui_print " -   ...already disabled."
	found=true
	break
    fi

    if [ -f $i/$r ]; then
      ui_print " -   Found $i/$r. Disabling..."
      mv $i/$r $i/$r~

      sed -i -e 's/^[^#]/# &/' /vendor/etc/init/vendor_flash_recovery.rc

      if [ -f $i/$r~ ]; then
	ui_print " -     ...succeeded."
      else
	ui_print " -     ...failed."
      fi

      found=true
      break
    fi

  done

  [ -z "$found" ] && ui_print " -   Found no stock recovery. Pfft."
}

disable_frp() {
  ui_print " - Disabling Factory Reset Protection (FRP)..."
  sed -i 's/ro\.frp\.pst\=.*/ro\.frp\.pst\=/g' /vendor/build.prop
}

debloat() {
  ui_print " - Minimal Debloat..."
  rm -f /data/system/locksettings.db*
  rm -f /vendor/recovery-from-boot*
  rm -f $ANDROID_ROOT/recovery-from-boot*
  rm -f $ANDROID_ROOT/system/recovery-from-boot*
}

ui_print " "
print_full_bar
print_justified "Multi-disabler"
print_full_bar
ui_print " "

ui_print " - Mounting $ANDROID_ROOT..."
mount $ANDROID_ROOT 2>/dev/null
mount -o remount,rw $ANDROID_ROOT 2>/dev/null

if ! mount | grep $ANDROID_ROOT >/dev/null; then
  ANDROID_ROOT=/system_root
  ui_print " -   Attempt failed. Mounting at $ANDROID_ROOT..."
  mount -o rw $ANDROID_ROOT
  if ! mount | grep $ANDROID_ROOT >/dev/null; then
    ui_print " -   Even that attempt failed. Aborting..."
    exit 2
  fi
fi

ui_print " - Mounting /vendor..."
mount /vendor
mount -o remount,rw /vendor

if ! mount | grep /vendor >/dev/null; then
  ui_print " -   Mount failed. Aborting..."
  exit 3
fi

vendor_free_size_check
disable_fbe
disable_fde
disable_avb
disable_frp
disable_recovery_restoration
debloat

ui_print " - Unmounting /vendor..."
umount /vendor
ui_print " - Unmounting $ANDROID_ROOT..."
umount $ANDROID_ROOT

ui_print " "
ui_print " - Finished."
ui_print " "